@page "/user/login"
@inject NavigationManager Nav
@attribute [Authorize]
@code {
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var returnUrl = ReturnUrl ?? "/";
            var url = new Uri(returnUrl, UriKind.RelativeOrAbsolute);
            var url_str = url.IsAbsoluteUri ? "/" : returnUrl;
            url_str = string.IsNullOrEmpty(url_str) == false ? url_str : "/";
            Nav.NavigateTo(url_str);
        }
        catch
        {
            
        }
        await base.OnInitializedAsync();
    }

    public static string Url(NavigationManager nav)
        => $"user/login?returnUrl={Uri.EscapeDataString(nav.ToBaseRelativePath(nav.Uri))}";
}
